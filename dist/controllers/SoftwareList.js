"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.deleteMasterList=exports.updateMasterList=exports.getMasterList=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _writer=require("../utils/writer");var _ClientBalanceService=require("../service/ClientBalanceService");var _v=_interopRequireDefault(require("uuid/v4"));var _StubClientBalanceService=require("../service/StubClientBalanceService");var _helper=require("../utils/helper");var _errors=require("../errors");// eslint-disable-next-line no-unused-vars
var getMasterList=/*#__PURE__*/function(){var _ref=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(req,res,next){var authorization,accountNumber,correlationId,whichService,fnStartTime,transactionId,response,fnElapsedTime,_fnElapsedTime,errorObject,errorMsg;return _regenerator["default"].wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Please trim the values from request. There is a weird bug where a space is added from request package when call is coming from other micro-service.
authorization=req.swagger.params["Authorization"].value;accountNumber=req.swagger.params["accountNumber"].value;// Trim in done before db call or rkey call
correlationId=req.swagger.params["correlationId"].value;//Check if stub is enabled (Stub flag is set for only NP1 deploy) Disabled as data is available in NP1.
whichService=_ClientBalanceService.retrieveClientBalanceService;if(process.env.STUB==="true"){whichService=_StubClientBalanceService.stubClientBalanceService}fnStartTime=Date.now();transactionId=(0,_v["default"])();res.setHeader("correlationId",correlationId?correlationId:"");res.setHeader("transactionId",transactionId);_context.prev=9;_context.next=12;return whichService(authorization,accountNumber,transactionId,correlationId);case 12:response=_context.sent;(0,_writer.writeJson)(res,response);fnElapsedTime=Date.now()-fnStartTime+"ms";global.logger.info("Served retrieveClientBalance",{fnElapsedTime:fnElapsedTime,operationName:"controller",transactionId:transactionId,correlationId:correlationId});_context.next=22;break;case 18:_context.prev=18;_context.t0=_context["catch"](9);_fnElapsedTime=Date.now()-fnStartTime+"ms";// Create a proper structured response and send it to the client
if(_context.t0.errorResponse){errorObject=_context.t0.errorResponse;errorObject.name=(0,_helper.empty)(_context.t0.name)?"Execution Error":_context.t0.name;(0,_writer.writeJson)(res,errorObject,_context.t0.statusCode);global.logger.error("Predefined Runtime Error.",{fnElapsedTime:_fnElapsedTime,operationName:"controller",correlationId:correlationId,transactionId:transactionId,stackTrace:_context.t0})}else{global.logger.error("Dynamic Runtime Error.",{fnElapsedTime:_fnElapsedTime,operationName:"controller",correlationId:correlationId,transactionId:transactionId,stackTrace:_context.t0.stack});errorMsg={code:50000,message:"Runtime error. Contact API Team with correlationId and transactionId",fields:[]};(0,_writer.writeJson)(res,new _errors.RunTimeError(global.httpStatusCodes.INTERNAL_SERVER_ERROR,"Runtime error",errorMsg),500)}case 22:case"end":return _context.stop();}}},_callee,null,[[9,18]])}));return function getMasterList(_x,_x2,_x3){return _ref.apply(this,arguments)}}();exports.getMasterList=getMasterList;var updateMasterList=/*#__PURE__*/function(){var _ref2=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee2(req,res,next){var authorization,accountNumber,correlationId,whichService,fnStartTime,transactionId,response,fnElapsedTime,_fnElapsedTime2,errorObject,errorMsg;return _regenerator["default"].wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// Please trim the values from request. There is a weird bug where a space is added from request package when call is coming from other micro-service.
authorization=req.swagger.params["Authorization"].value;accountNumber=req.swagger.params["accountNumber"].value;// Trim in done before db call or rkey call
correlationId=req.swagger.params["correlationId"].value;//Check if stub is enabled (Stub flag is set for only NP1 deploy) Disabled as data is available in NP1.
whichService=_ClientBalanceService.retrieveClientBalanceService;if(process.env.STUB==="true"){whichService=_StubClientBalanceService.stubClientBalanceService}fnStartTime=Date.now();transactionId=(0,_v["default"])();res.setHeader("correlationId",correlationId?correlationId:"");res.setHeader("transactionId",transactionId);_context2.prev=9;_context2.next=12;return whichService(authorization,accountNumber,transactionId,correlationId);case 12:response=_context2.sent;(0,_writer.writeJson)(res,response);fnElapsedTime=Date.now()-fnStartTime+"ms";global.logger.info("Served retrieveClientBalance",{fnElapsedTime:fnElapsedTime,operationName:"controller",transactionId:transactionId,correlationId:correlationId});_context2.next=22;break;case 18:_context2.prev=18;_context2.t0=_context2["catch"](9);_fnElapsedTime2=Date.now()-fnStartTime+"ms";// Create a proper structured response and send it to the client
if(_context2.t0.errorResponse){errorObject=_context2.t0.errorResponse;errorObject.name=(0,_helper.empty)(_context2.t0.name)?"Execution Error":_context2.t0.name;(0,_writer.writeJson)(res,errorObject,_context2.t0.statusCode);global.logger.error("Predefined Runtime Error.",{fnElapsedTime:_fnElapsedTime2,operationName:"controller",correlationId:correlationId,transactionId:transactionId,stackTrace:_context2.t0})}else{global.logger.error("Dynamic Runtime Error.",{fnElapsedTime:_fnElapsedTime2,operationName:"controller",correlationId:correlationId,transactionId:transactionId,stackTrace:_context2.t0.stack});errorMsg={code:50000,message:"Runtime error. Contact API Team with correlationId and transactionId",fields:[]};(0,_writer.writeJson)(res,new _errors.RunTimeError(global.httpStatusCodes.INTERNAL_SERVER_ERROR,"Runtime error",errorMsg),500)}case 22:case"end":return _context2.stop();}}},_callee2,null,[[9,18]])}));return function updateMasterList(_x4,_x5,_x6){return _ref2.apply(this,arguments)}}();exports.updateMasterList=updateMasterList;var deleteMasterList=/*#__PURE__*/function(){var _ref3=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee3(req,res,next){var authorization,accountNumber,correlationId,whichService,fnStartTime,transactionId,response,fnElapsedTime,_fnElapsedTime3,errorObject,errorMsg;return _regenerator["default"].wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// Please trim the values from request. There is a weird bug where a space is added from request package when call is coming from other micro-service.
authorization=req.swagger.params["Authorization"].value;accountNumber=req.swagger.params["accountNumber"].value;// Trim in done before db call or rkey call
correlationId=req.swagger.params["correlationId"].value;//Check if stub is enabled (Stub flag is set for only NP1 deploy) Disabled as data is available in NP1.
whichService=_ClientBalanceService.retrieveClientBalanceService;if(process.env.STUB==="true"){whichService=_StubClientBalanceService.stubClientBalanceService}fnStartTime=Date.now();transactionId=(0,_v["default"])();res.setHeader("correlationId",correlationId?correlationId:"");res.setHeader("transactionId",transactionId);_context3.prev=9;_context3.next=12;return whichService(authorization,accountNumber,transactionId,correlationId);case 12:response=_context3.sent;(0,_writer.writeJson)(res,response);fnElapsedTime=Date.now()-fnStartTime+"ms";global.logger.info("Served retrieveClientBalance",{fnElapsedTime:fnElapsedTime,operationName:"controller",transactionId:transactionId,correlationId:correlationId});_context3.next=22;break;case 18:_context3.prev=18;_context3.t0=_context3["catch"](9);_fnElapsedTime3=Date.now()-fnStartTime+"ms";// Create a proper structured response and send it to the client
if(_context3.t0.errorResponse){errorObject=_context3.t0.errorResponse;errorObject.name=(0,_helper.empty)(_context3.t0.name)?"Execution Error":_context3.t0.name;(0,_writer.writeJson)(res,errorObject,_context3.t0.statusCode);global.logger.error("Predefined Runtime Error.",{fnElapsedTime:_fnElapsedTime3,operationName:"controller",correlationId:correlationId,transactionId:transactionId,stackTrace:_context3.t0})}else{global.logger.error("Dynamic Runtime Error.",{fnElapsedTime:_fnElapsedTime3,operationName:"controller",correlationId:correlationId,transactionId:transactionId,stackTrace:_context3.t0.stack});errorMsg={code:50000,message:"Runtime error. Contact API Team with correlationId and transactionId",fields:[]};(0,_writer.writeJson)(res,new _errors.RunTimeError(global.httpStatusCodes.INTERNAL_SERVER_ERROR,"Runtime error",errorMsg),500)}case 22:case"end":return _context3.stop();}}},_callee3,null,[[9,18]])}));return function deleteMasterList(_x7,_x8,_x9){return _ref3.apply(this,arguments)}}();exports.deleteMasterList=deleteMasterList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,