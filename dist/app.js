"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");var fs=_interopRequireWildcard(require("fs"));var path=_interopRequireWildcard(require("path"));var http=_interopRequireWildcard(require("http"));var swaggerTools=_interopRequireWildcard(require("swagger-tools"));var jsyaml=_interopRequireWildcard(require("js-yaml"));var httpStatusCodes=_interopRequireWildcard(require("http-status"));var winston=_interopRequireWildcard(require("winston"));var _v=_interopRequireDefault(require("uuid/v4"));var _helper=require("./utils/helper");var _config=require("./utils/config");var _connect=_interopRequireDefault(require("connect"));require("./database");// Get ip address and port for client details
//get ipAddress and port
var _getIpAddressAndPort=(0,_helper.getIpAddressAndPort)(),ipAddress=_getIpAddressAndPort.ipAddress,port=_getIpAddressAndPort.port;// Set App Name
global.apiName=process.env.API_NAME;global.apiVersion=process.env.API_VERSION;//**********************************************
//
// Set up Logger
//
//**********************************************
var metaData=winston.format(function(info){info.applicationName=global.apiName;info.applicationVersion=global.apiVersion;info.environment=process.env.ENVIRONMENT;return info});var logger=winston.createLogger({level:process.env.LOG_LEVEL,transports:[// Log to console
new winston.transports.Console({name:"console",json:true,level:process.env.LOG_LEVEL})],format:winston.format.combine(winston.format.timestamp(),metaData(),winston.format.json())});global.logger=logger;//**********************************************
//
// Check configuration before starting the server
//
//**********************************************
if(!(0,_config.checkConfiguration)()){process.exit(1)}else{global.logger.info("All configurations are available to start the server",{operationName:"createServer"})}//**********************************************
//
// Create database connection
//
//**********************************************
//**********************************************
//
// Setup global variables for the entire application
//
//**********************************************
global.httpStatusCodes=httpStatusCodes;global.serviceUptime=new Date;global.certificate=process.env.JWT_CERTIFICATE;//**********************************************
//
// Start Server
//
//**********************************************
var app=(0,_connect["default"])();// swaggerRouter configuration
var options={swaggerUi:path.join(__dirname,"/swagger.json"),controllers:path.join(__dirname,"./controllers"),useStubs:process.env.STUB};// The Swagger document (require it, build it programmatically, fetch it from a URL, ...)
var spec=fs.readFileSync(path.join(__dirname,"api/swagger.yaml"),"utf8");var swaggerDoc=jsyaml.safeLoad(spec);var contextPath=process.env.CONTEXT_PATH;var uiOptions={apiDocs:contextPath+"/swagger",swaggerUi:contextPath+"/docs"};// Initialize the Swagger middleware
swaggerTools.initializeMiddleware(swaggerDoc,function(middleware){// Interpret Swagger resources and attach metadata to request - must be first in swagger-tools middleware chain
app.use(middleware.swaggerMetadata());// Validate Swagger requests
app.use(middleware.swaggerValidator());// Route validated requests to appropriate controller
app.use(middleware.swaggerRouter(options));// Serve the Swagger documents and Swagger UI
app.use(middleware.swaggerUi(uiOptions));// eslint-disable-next-line no-unused-vars
app.use(function(err,req,res,next){if(err){var transactionId=(0,_v["default"])();var correlationId;if(req.swagger.params["correlationId"]){correlationId=req.swagger.params["correlationId"].value;res.setHeader("correlationId",correlationId?correlationId:"")}res.statusCode=httpStatusCodes.BAD_REQUEST;res.setHeader("transactionId",transactionId);res.setHeader("Content-Type","application/json");logger.log("error","Input request validation failed",{operationId:"defaultServerError",transactionId:transactionId,correlationId:correlationId,stackTrace:err});var error={code:10001,message:err.message,fields:[]};res.end(JSON.stringify(error))}});// Start the server
http.createServer(app).listen(port,function(){logger.info("Started Server at "+process.env.API_NAME+" api server started. URL: http://"+ipAddress+":"+port+contextPath,{operationName:"createServer"});logger.info("Swagger-ui is available on http://"+ipAddress+":"+port+contextPath+"/docs.",{operationName:"createServer"})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,