"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.databaseConnection=void 0;var _sequelize=require("sequelize");var _index=require("./models/index");// Op is used for defining alias for operations like $and and $or. This improves security for database access.
// Please define it in the the sequelize options.
var database=process.env.PWM_DM_DATABASE;var username=process.env.PWM_DM_USERNAME;var password=process.env.PWM_DM_PASSWORD;var host=process.env.PWM_DM_HOSTNAME;var domain=process.env.ENVIRONMENT;var sequelize=new _sequelize.Sequelize(database,username,password,{host:host,port:1433,logging:false,//eslint-disable-line no-console
dialect:"mssql",dialectOptions:{encrypt:true,domain:domain,requestTimeout:90000,authentication:{type:"ntlm",options:{userName:username,password:password,domain:domain}},options:{encrypt:true,requestTimeout:9000}},pool:{min:1,max:5,idle:30000}});sequelize.authenticate().then(function(){global.logger.info("Connection to database has been established successfully",{operationName:"dbConnection"})})["catch"](function(err){global.logger.error("Failed to open an connection to database",{operationName:"dbConnection",stackTrace:err})});var databaseConnection={sequelize:sequelize,Sequelize:_sequelize.Sequelize,Op:_sequelize.Sequelize.Op,models:_index.models};exports.databaseConnection=databaseConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkYXRhYmFzZSIsInByb2Nlc3MiLCJlbnYiLCJQV01fRE1fREFUQUJBU0UiLCJ1c2VybmFtZSIsIlBXTV9ETV9VU0VSTkFNRSIsInBhc3N3b3JkIiwiUFdNX0RNX1BBU1NXT1JEIiwiaG9zdCIsIlBXTV9ETV9IT1NUTkFNRSIsImRvbWFpbiIsIkVOVklST05NRU5UIiwic2VxdWVsaXplIiwiU2VxdWVsaXplIiwicG9ydCIsImxvZ2dpbmciLCJkaWFsZWN0IiwiZGlhbGVjdE9wdGlvbnMiLCJlbmNyeXB0IiwicmVxdWVzdFRpbWVvdXQiLCJhdXRoZW50aWNhdGlvbiIsInR5cGUiLCJvcHRpb25zIiwidXNlck5hbWUiLCJwb29sIiwibWluIiwibWF4IiwiaWRsZSIsImF1dGhlbnRpY2F0ZSIsInRoZW4iLCJnbG9iYWwiLCJsb2dnZXIiLCJpbmZvIiwib3BlcmF0aW9uTmFtZSIsImVyciIsImVycm9yIiwic3RhY2tUcmFjZSIsImRhdGFiYXNlQ29ubmVjdGlvbiIsIk9wIiwibW9kZWxzIl0sIm1hcHBpbmdzIjoid0dBQUEsb0NBQ0EscUNBRUE7QUFDQTtBQUVBLEdBQUlBLENBQUFBLFFBQVEsQ0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGVBQTNCLENBQ0EsR0FBSUMsQ0FBQUEsUUFBUSxDQUFHSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsZUFBM0IsQ0FDQSxHQUFJQyxDQUFBQSxRQUFRLENBQUdMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxlQUEzQixDQUNBLEdBQUlDLENBQUFBLElBQUksQ0FBR1AsT0FBTyxDQUFDQyxHQUFSLENBQVlPLGVBQXZCLENBQ0EsR0FBSUMsQ0FBQUEsTUFBTSxDQUFHVCxPQUFPLENBQUNDLEdBQVIsQ0FBWVMsV0FBekIsQ0FHQSxHQUFNQyxDQUFBQSxTQUFTLENBQUcsR0FBSUMscUJBQUosQ0FBY2IsUUFBZCxDQUF1QkksUUFBdkIsQ0FBZ0NFLFFBQWhDLENBQXlDLENBQzFERSxJQUFJLENBQUpBLElBRDBELENBRTFETSxJQUFJLENBQUUsSUFGb0QsQ0FHMURDLE9BQU8sQ0FBRSxLQUhpRCxDQUcxQztBQUNoQkMsT0FBTyxDQUFFLE9BSmlELENBSzFEQyxjQUFjLENBQUMsQ0FDZEMsT0FBTyxDQUFFLElBREssQ0FFZFIsTUFBTSxDQUFFQSxNQUZNLENBR2RTLGNBQWMsQ0FBRSxLQUhGLENBSWRDLGNBQWMsQ0FBRSxDQUNmQyxJQUFJLENBQUUsTUFEUyxDQUVmQyxPQUFPLENBQUUsQ0FDUkMsUUFBUSxDQUFFbkIsUUFERixDQUVSRSxRQUFRLENBQUVBLFFBRkYsQ0FHUkksTUFBTSxDQUFFQSxNQUhBLENBRk0sQ0FKRixDQVlkWSxPQUFPLENBQUUsQ0FDUkosT0FBTyxDQUFFLElBREQsQ0FFUkMsY0FBYyxDQUFFLElBRlIsQ0FaSyxDQUwyQyxDQXNCMURLLElBQUksQ0FBRSxDQUNMQyxHQUFHLENBQUUsQ0FEQSxDQUVMQyxHQUFHLENBQUUsQ0FGQSxDQUdMQyxJQUFJLENBQUUsS0FIRCxDQXRCb0QsQ0FBekMsQ0FBbEIsQ0ErQkFmLFNBQVMsQ0FDUGdCLFlBREYsR0FFRUMsSUFGRixDQUVPLFVBQU0sQ0FDWEMsTUFBTSxDQUFDQyxNQUFQLENBQWNDLElBQWQsQ0FBbUIsMERBQW5CLENBQThFLENBQUNDLGFBQWEsQ0FBQyxjQUFmLENBQTlFLENBQ0EsQ0FKRixXQUtTLFNBQUFDLEdBQUcsQ0FBSSxDQUNkSixNQUFNLENBQUNDLE1BQVAsQ0FBY0ksS0FBZCxDQUFvQiwwQ0FBcEIsQ0FBK0QsQ0FBQ0YsYUFBYSxDQUFDLGNBQWYsQ0FBOEJHLFVBQVUsQ0FBQ0YsR0FBekMsQ0FBL0QsQ0FDQSxDQVBGLEVBVUEsR0FBTUcsQ0FBQUEsa0JBQWtCLENBQUcsQ0FDMUJ6QixTQUFTLENBQUVBLFNBRGUsQ0FFMUJDLFNBQVMsQ0FBRUEsb0JBRmUsQ0FHMUJ5QixFQUFFLENBQUV6QixxQkFBVXlCLEVBSFksQ0FJMUJDLE1BQU0sQ0FBR0EsYUFKaUIsQ0FBM0IsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2VxdWVsaXplfSBmcm9tIFwic2VxdWVsaXplXCI7XHJcbmltcG9ydCB7bW9kZWxzfSBmcm9tIFwiLi9tb2RlbHMvaW5kZXhcIjtcclxuXHJcbi8vIE9wIGlzIHVzZWQgZm9yIGRlZmluaW5nIGFsaWFzIGZvciBvcGVyYXRpb25zIGxpa2UgJGFuZCBhbmQgJG9yLiBUaGlzIGltcHJvdmVzIHNlY3VyaXR5IGZvciBkYXRhYmFzZSBhY2Nlc3MuXHJcbi8vIFBsZWFzZSBkZWZpbmUgaXQgaW4gdGhlIHRoZSBzZXF1ZWxpemUgb3B0aW9ucy5cclxuXHJcbmxldCBkYXRhYmFzZSA9IHByb2Nlc3MuZW52LlBXTV9ETV9EQVRBQkFTRTtcclxubGV0IHVzZXJuYW1lID0gcHJvY2Vzcy5lbnYuUFdNX0RNX1VTRVJOQU1FO1xyXG5sZXQgcGFzc3dvcmQgPSBwcm9jZXNzLmVudi5QV01fRE1fUEFTU1dPUkQ7XHJcbmxldCBob3N0ID0gcHJvY2Vzcy5lbnYuUFdNX0RNX0hPU1ROQU1FO1xyXG5sZXQgZG9tYWluID0gcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQ7XHJcblxyXG5cclxuY29uc3Qgc2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShkYXRhYmFzZSx1c2VybmFtZSxwYXNzd29yZCx7XHJcblx0aG9zdCxcclxuXHRwb3J0OiAxNDMzLFxyXG5cdGxvZ2dpbmc6IGZhbHNlLCAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG5cdGRpYWxlY3Q6IFwibXNzcWxcIixcclxuXHRkaWFsZWN0T3B0aW9uczp7XHJcblx0XHRlbmNyeXB0OiB0cnVlLFxyXG5cdFx0ZG9tYWluOiBkb21haW4sXHJcblx0XHRyZXF1ZXN0VGltZW91dDogOTAwMDAsXHJcblx0XHRhdXRoZW50aWNhdGlvbjoge1xyXG5cdFx0XHR0eXBlOiBcIm50bG1cIixcclxuXHRcdFx0b3B0aW9uczoge1xyXG5cdFx0XHRcdHVzZXJOYW1lOiB1c2VybmFtZSxcclxuXHRcdFx0XHRwYXNzd29yZDogcGFzc3dvcmQsXHJcblx0XHRcdFx0ZG9tYWluOiBkb21haW4sXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRvcHRpb25zOiB7XHJcblx0XHRcdGVuY3J5cHQ6IHRydWUsXHJcblx0XHRcdHJlcXVlc3RUaW1lb3V0OiA5MDAwLFxyXG5cdFx0fVxyXG5cdH0sXHJcblx0cG9vbDoge1xyXG5cdFx0bWluOiAxLFxyXG5cdFx0bWF4OiA1LFxyXG5cdFx0aWRsZTogMzAwMDBcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5zZXF1ZWxpemVcclxuXHQuYXV0aGVudGljYXRlKClcclxuXHQudGhlbigoKSA9PiB7XHJcblx0XHRnbG9iYWwubG9nZ2VyLmluZm8oXCJDb25uZWN0aW9uIHRvIGRhdGFiYXNlIGhhcyBiZWVuIGVzdGFibGlzaGVkIHN1Y2Nlc3NmdWxseVwiLHtvcGVyYXRpb25OYW1lOlwiZGJDb25uZWN0aW9uXCJ9KTtcclxuXHR9KVxyXG5cdC5jYXRjaCggZXJyID0+IHtcclxuXHRcdGdsb2JhbC5sb2dnZXIuZXJyb3IoXCJGYWlsZWQgdG8gb3BlbiBhbiBjb25uZWN0aW9uIHRvIGRhdGFiYXNlXCIse29wZXJhdGlvbk5hbWU6XCJkYkNvbm5lY3Rpb25cIixzdGFja1RyYWNlOmVycn0pO1xyXG5cdH0pO1xyXG5cclxuXHJcbmNvbnN0IGRhdGFiYXNlQ29ubmVjdGlvbiA9IHtcclxuXHRzZXF1ZWxpemU6IHNlcXVlbGl6ZSxcclxuXHRTZXF1ZWxpemU6IFNlcXVlbGl6ZSxcclxuXHRPcDogU2VxdWVsaXplLk9wLFxyXG5cdG1vZGVscyA6IG1vZGVsc1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCB7ZGF0YWJhc2VDb25uZWN0aW9ufTtcclxuIl19