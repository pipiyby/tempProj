"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.retrieveClientBalanceService=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _moment=_interopRequireDefault(require("moment"));var _helper=require("../utils/helper");var _index=require("../errors/index");var _index2=require("../token/index");var _index3=require("../database/index");var _index4=require("../database/queries/index");/**
 * Provides client balance
 * The endpoint provides details on the client balance for an individual account or a list of account ids
 * authorization String Authorization token that this system will verify.
 * accountNumber List PWM Account Number
 * correlationId String A tracking id provided by the calling application (optional)
 * returns clientBalanceResponse
 **/var retrieveClientBalanceService=/*#__PURE__*/function(){var _ref=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(authorization,accountNumber,transactionId,correlationId){var errorMsg,_errorMsg,token,validateTokenResponse,_errorMsg2,_errorMsg3,validationErrors,_errorMsg4,queryString,dbStartTime,queryResultSet,dbEndTime,_dbEndTime,_errorMsg5,returnData,response,resultArray,_errorMsg6;return _regenerator["default"].wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(process.env.ENVIRONMENT.toLowerCase()!=="np2")){_context.next=21;break}if(!(0,_helper.empty)(authorization)){_context.next=6;break}errorMsg={code:40001,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token is empty"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],errorMsg);case 6:if(!(authorization&&authorization.indexOf("Bearer ")===-1)){_context.next=11;break}_errorMsg={code:40001,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token doesn't have a Bearer prefix to it"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],_errorMsg);case 11:token=authorization.substring(6).trim();_context.next=14;return(0,_index2.validateToken)(token);case 14:validateTokenResponse=_context.sent;if(!(validateTokenResponse.status==="EXPIRED")){_context.next=18;break}_errorMsg2={code:40002,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token is expired"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],_errorMsg2);case 18:if(!validateTokenResponse.error){_context.next=21;break}_errorMsg3={code:40003,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token is not valid"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],_errorMsg3);case 21:/**
	 * Business logic to validate Input variables
	 * accountId should be an array and cannot be empty
	 * startDate and endDate should be a number of format YYYYMMDD
	 */validationErrors=[];if((0,_helper.empty)(accountNumber)){validationErrors.push({name:"accountId",value:"accountId provided is empty"})}else if(accountNumber.constructor===Array){accountNumber=accountNumber.map(function(val){var temp=(""+val).trim();if(temp.constructor!==String){validationErrors.push({name:"accountNumber",value:"".concat(temp," should be of type string")})}else if(!(0,_helper.isAccountNumber)(temp)){validationErrors.push({name:"accountNumber",value:"".concat(temp," is not a valid accountNumber")})}return temp})}if((0,_helper.empty)(validationErrors)){_context.next=26;break}_errorMsg4={code:40301,message:"Some parameters are missing",fields:validationErrors};throw new _index.ValidationError(global.httpStatusCodes.BAD_REQUEST,"Some parameters are missing",_errorMsg4);case 26:/**
	 * All the inputs are valid.
	 * Query the view and return the data
	 */ /**
	 * Quick hack to execute the query in varchar instead of nvarchar,.
	 * Sequelize inbuilt query builder converts string to unicode, which has a performance impact on the view
	 * This performance is caused because of nvarchar usage by sequelize instead of varchar
	 * Workaround is to manually replace the query.
	 * Note: use singlequote while inserting parameters because doublequote will throw error in mssql.
	 */queryString=_index4.queryForClientBalance.replace(":accountId",accountNumber.map(function(account){return"ca.CustodianAccountID='".concat(account.trim(),"'")}).join(" OR "));dbStartTime=Date.now();_context.prev=28;_context.next=31;return _index3.databaseConnection.sequelize.query(queryString,{type:_index3.databaseConnection.sequelize.QueryTypes.RAW,raw:true});case 31:queryResultSet=_context.sent;dbEndTime=Date.now()-dbStartTime+"ms";global.logger.info("Data Access success",{dbElapsedTime:dbEndTime,operationName:"dbQuery",transactionId:transactionId,correlationId:correlationId});_context.next=42;break;case 36:_context.prev=36;_context.t0=_context["catch"](28);_dbEndTime=Date.now()-dbStartTime+"ms";global.logger.info("Data Access Failed",{dbElapsedTime:_dbEndTime,operationName:"dbQuery",transactionId:transactionId,correlationId:correlationId,stackTrace:_context.t0.stack});_errorMsg5={code:60001,message:"Database Error",fields:[]};throw new _index.DataAccessError(global.httpStatusCodes.INTERNAL_SERVER_ERROR,"Database error",_errorMsg5);case 42:returnData={};returnData.clientBalance={};response=[];resultArray=queryResultSet[0];if((0,_helper.empty)(resultArray)){_context.next=52;break}// This means we have data returned from the DB. Time to format it.
resultArray.map(function(value){response.push({"accountNumber":value.accountNumber?value.accountNumber:null,"balance":!(0,_helper.empty)(value.currentBalance)?value.currentBalance:0,"asOfDate":value.asOfDate?(0,_moment["default"])(value.asOfDate.toString()).format("YYYY-MM-DD"):null,"pendingDividend":value.pendingDividend?value.pendingDividend:null,//to be updated in future
"marginBalance":value.marginBalance?value.marginBalance:null,//to be updated in future
"dayChangeAmt":value.dayChangeAmt?value.dayChangeAmt:null,//to be updated in future
"dayChangePct":value.dayChangePct?value.dayChangePct:null,//to be updated in future
"accruedInterest":value.accruedInterest?value.accruedInterest:null//to be updated in future
})});returnData.clientBalance.records=response;return _context.abrupt("return",returnData);case 52:if(!(resultArray&&resultArray.length===0)){_context.next=55;break}_errorMsg6={code:60002,message:"No content found in database",fields:[]};throw new _index.NoContentError(global.httpStatusCodes.NO_CONTENT,global.httpStatusCodes["204_MESSAGE"],_errorMsg6);case 55:case"end":return _context.stop();}}},_callee,null,[[28,36]])}));return function retrieveClientBalanceService(_x,_x2,_x3,_x4){return _ref.apply(this,arguments)}}();exports.retrieveClientBalanceService=retrieveClientBalanceService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,