"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.getReadyStatusService=exports.getLiveStatusService=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _index=require("../database/index");/**
 * Gets the status of the microservice itself
 *
 * returns liveStatus
 **/var getLiveStatusService=function getLiveStatusService(){if(!global.serviceUptime){return{live:false,liveAsOf:null,buildDate:null,githubTagId:""}}else{return{live:true,liveAsOf:global.serviceUptime,buildDate:global.serviceUptime,githubTagId:""}}};/**
 * Gets the status of the microservice backend systems
 * Gets the status of the entire given system, including all downstream systems.
 *
 * returns readyStatus
 **/exports.getLiveStatusService=getLiveStatusService;var getReadyStatusService=/*#__PURE__*/function(){var _ref=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(){var responseObject;return _regenerator["default"].wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:responseObject={};responseObject.backends=[];if(!global.serviceUptime){responseObject.ready=false;responseObject.readyAsOf=null}else{responseObject.ready=true;responseObject.readyAsOf=global.serviceUptime}_context.prev=3;_context.next=6;return _index.databaseConnection.sequelize.authenticate();case 6:responseObject.backends.push({name:"PWM_DM",status:global.httpStatusCodes.OK});_context.next=15;break;case 9:_context.prev=9;_context.t0=_context["catch"](3);global.logger.error("PWM_DM error",{operationName:"readyStatusService",stackTrace:_context.t0});responseObject.backends.push({name:"PWM_DM",status:global.httpStatusCodes.INTERNAL_SERVER_ERROR});responseObject.readyAsOf=null;responseObject.ready=false;case 15:return _context.abrupt("return",responseObject);case 16:case"end":return _context.stop();}}},_callee,null,[[3,9]])}));return function getReadyStatusService(){return _ref.apply(this,arguments)}}();exports.getReadyStatusService=getReadyStatusService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlL1N0YXR1c1NlcnZpY2UuanMiXSwibmFtZXMiOlsiZ2V0TGl2ZVN0YXR1c1NlcnZpY2UiLCJnbG9iYWwiLCJzZXJ2aWNlVXB0aW1lIiwibGl2ZSIsImxpdmVBc09mIiwiYnVpbGREYXRlIiwiZ2l0aHViVGFnSWQiLCJnZXRSZWFkeVN0YXR1c1NlcnZpY2UiLCJyZXNwb25zZU9iamVjdCIsImJhY2tlbmRzIiwicmVhZHkiLCJyZWFkeUFzT2YiLCJkYXRhYmFzZUNvbm5lY3Rpb24iLCJzZXF1ZWxpemUiLCJhdXRoZW50aWNhdGUiLCJwdXNoIiwibmFtZSIsInN0YXR1cyIsImh0dHBTdGF0dXNDb2RlcyIsIk9LIiwibG9nZ2VyIiwiZXJyb3IiLCJvcGVyYXRpb25OYW1lIiwic3RhY2tUcmFjZSIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiJdLCJtYXBwaW5ncyI6IkFBQUEsYSwrWEFDQSx3Q0FFQTs7OztJQUtBLEdBQU1BLENBQUFBLG9CQUFvQixDQUFHLFFBQXZCQSxDQUFBQSxvQkFBdUIsRUFBTSxDQUNsQyxHQUFJLENBQUNDLE1BQU0sQ0FBQ0MsYUFBWixDQUEyQixDQUMxQixNQUFPLENBQ05DLElBQUksQ0FBRSxLQURBLENBRU5DLFFBQVEsQ0FBRSxJQUZKLENBR05DLFNBQVMsQ0FBRSxJQUhMLENBSU5DLFdBQVcsQ0FBRSxFQUpQLENBTVAsQ0FQRCxJQU9PLENBQ04sTUFBTyxDQUNOSCxJQUFJLENBQUUsSUFEQSxDQUVOQyxRQUFRLENBQUVILE1BQU0sQ0FBQ0MsYUFGWCxDQUdORyxTQUFTLENBQUVKLE1BQU0sQ0FBQ0MsYUFIWixDQUlOSSxXQUFXLENBQUUsRUFKUCxDQU1QLENBQ0QsQ0FoQkQsQ0FtQkE7Ozs7O3NEQU1BLEdBQU1DLENBQUFBLHFCQUFxQiw4R0FBRywwSkFDekJDLGNBRHlCLENBQ1IsRUFEUSxDQUU3QkEsY0FBYyxDQUFDQyxRQUFmLENBQTBCLEVBQTFCLENBQ0EsR0FBSSxDQUFDUixNQUFNLENBQUNDLGFBQVosQ0FBMkIsQ0FDMUJNLGNBQWMsQ0FBQ0UsS0FBZixDQUF1QixLQUF2QixDQUNBRixjQUFjLENBQUNHLFNBQWYsQ0FBMkIsSUFDM0IsQ0FIRCxJQUdPLENBQ05ILGNBQWMsQ0FBQ0UsS0FBZixDQUF1QixJQUF2QixDQUNBRixjQUFjLENBQUNHLFNBQWYsQ0FBMkJWLE1BQU0sQ0FBQ0MsYUFDbEMsQ0FUNEIsc0NBWXRCVSwyQkFBbUJDLFNBQW5CLENBQTZCQyxZQUE3QixFQVpzQixRQWE1Qk4sY0FBYyxDQUFDQyxRQUFmLENBQXdCTSxJQUF4QixDQUE2QixDQUFDQyxJQUFJLENBQUUsUUFBUCxDQUFpQkMsTUFBTSxDQUFFaEIsTUFBTSxDQUFDaUIsZUFBUCxDQUF1QkMsRUFBaEQsQ0FBN0IsRUFiNEIsK0VBZTVCbEIsTUFBTSxDQUFDbUIsTUFBUCxDQUFjQyxLQUFkLENBQW9CLGNBQXBCLENBQW9DLENBQUNDLGFBQWEsQ0FBRSxvQkFBaEIsQ0FBc0NDLFVBQVUsWUFBaEQsQ0FBcEMsRUFDQWYsY0FBYyxDQUFDQyxRQUFmLENBQXdCTSxJQUF4QixDQUE2QixDQUFDQyxJQUFJLENBQUUsUUFBUCxDQUFpQkMsTUFBTSxDQUFFaEIsTUFBTSxDQUFDaUIsZUFBUCxDQUF1Qk0scUJBQWhELENBQTdCLEVBQ0FoQixjQUFjLENBQUNHLFNBQWYsQ0FBMkIsSUFBM0IsQ0FDQUgsY0FBYyxDQUFDRSxLQUFmLENBQXVCLEtBQXZCLENBbEI0Qix3Q0FxQnRCRixjQXJCc0IscUVBQUgsa0JBQXJCRCxDQUFBQSxxQkFBcUIsd0NBQTNCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuaW1wb3J0IHtkYXRhYmFzZUNvbm5lY3Rpb259IGZyb20gXCIuLi9kYXRhYmFzZS9pbmRleFwiO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHN0YXR1cyBvZiB0aGUgbWljcm9zZXJ2aWNlIGl0c2VsZlxyXG4gKlxyXG4gKiByZXR1cm5zIGxpdmVTdGF0dXNcclxuICoqL1xyXG5jb25zdCBnZXRMaXZlU3RhdHVzU2VydmljZSA9ICgpID0+IHtcclxuXHRpZiAoIWdsb2JhbC5zZXJ2aWNlVXB0aW1lKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRsaXZlOiBmYWxzZSxcclxuXHRcdFx0bGl2ZUFzT2Y6IG51bGwsXHJcblx0XHRcdGJ1aWxkRGF0ZTogbnVsbCxcclxuXHRcdFx0Z2l0aHViVGFnSWQ6IFwiXCJcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGxpdmU6IHRydWUsXHJcblx0XHRcdGxpdmVBc09mOiBnbG9iYWwuc2VydmljZVVwdGltZSxcclxuXHRcdFx0YnVpbGREYXRlOiBnbG9iYWwuc2VydmljZVVwdGltZSxcclxuXHRcdFx0Z2l0aHViVGFnSWQ6IFwiXCJcclxuXHRcdH07XHJcblx0fVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBzdGF0dXMgb2YgdGhlIG1pY3Jvc2VydmljZSBiYWNrZW5kIHN5c3RlbXNcclxuICogR2V0cyB0aGUgc3RhdHVzIG9mIHRoZSBlbnRpcmUgZ2l2ZW4gc3lzdGVtLCBpbmNsdWRpbmcgYWxsIGRvd25zdHJlYW0gc3lzdGVtcy5cclxuICpcclxuICogcmV0dXJucyByZWFkeVN0YXR1c1xyXG4gKiovXHJcbmNvbnN0IGdldFJlYWR5U3RhdHVzU2VydmljZSA9IGFzeW5jICgpID0+IHtcclxuXHRsZXQgcmVzcG9uc2VPYmplY3QgPSB7fTtcclxuXHRyZXNwb25zZU9iamVjdC5iYWNrZW5kcyA9IFtdO1xyXG5cdGlmICghZ2xvYmFsLnNlcnZpY2VVcHRpbWUpIHtcclxuXHRcdHJlc3BvbnNlT2JqZWN0LnJlYWR5ID0gZmFsc2U7XHJcblx0XHRyZXNwb25zZU9iamVjdC5yZWFkeUFzT2YgPSBudWxsO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXNwb25zZU9iamVjdC5yZWFkeSA9IHRydWU7XHJcblx0XHRyZXNwb25zZU9iamVjdC5yZWFkeUFzT2YgPSBnbG9iYWwuc2VydmljZVVwdGltZTtcclxuXHR9XHJcblxyXG5cdHRyeSB7XHJcblx0XHRhd2FpdCBkYXRhYmFzZUNvbm5lY3Rpb24uc2VxdWVsaXplLmF1dGhlbnRpY2F0ZSgpO1xyXG5cdFx0cmVzcG9uc2VPYmplY3QuYmFja2VuZHMucHVzaCh7bmFtZTogXCJQV01fRE1cIiwgc3RhdHVzOiBnbG9iYWwuaHR0cFN0YXR1c0NvZGVzLk9LfSk7XHJcblx0fSBjYXRjaCAoZSkge1xyXG5cdFx0Z2xvYmFsLmxvZ2dlci5lcnJvcihcIlBXTV9ETSBlcnJvclwiLCB7b3BlcmF0aW9uTmFtZTogXCJyZWFkeVN0YXR1c1NlcnZpY2VcIiwgc3RhY2tUcmFjZTogZX0pO1xyXG5cdFx0cmVzcG9uc2VPYmplY3QuYmFja2VuZHMucHVzaCh7bmFtZTogXCJQV01fRE1cIiwgc3RhdHVzOiBnbG9iYWwuaHR0cFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUn0pO1xyXG5cdFx0cmVzcG9uc2VPYmplY3QucmVhZHlBc09mID0gbnVsbDtcclxuXHRcdHJlc3BvbnNlT2JqZWN0LnJlYWR5ID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmVzcG9uc2VPYmplY3Q7XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IHtnZXRMaXZlU3RhdHVzU2VydmljZSwgZ2V0UmVhZHlTdGF0dXNTZXJ2aWNlfTtcclxuXHJcbiJdfQ==