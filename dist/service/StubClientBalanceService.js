"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.stubClientBalanceService=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _index=require("../errors/index");var _helper=require("../utils/helper");var _index2=require("../token/index");var _stubData=require("../database/stubs/stubData");/**
 * \"Provides client Balance\"
 * The endpoint provides details on the client Balance for an individual account or a list of account ids
 *
 * authorization String Authorization token that this system will verify.
 * accountId List PWM Account Number
 * startDate String start date in YYYYMMDD
 * endDate String end date in YYYYMMDD
 * correlationId String A tracking id provided by the calling application (optional)
 * returns clientBalanceResponse
 **/var stubClientBalanceService=/*#__PURE__*/function(){var _ref=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(authorization,accountNumber){var errorMsg,_errorMsg,token,validateTokenResponse,_errorMsg2,_errorMsg3,validationErrors,_errorMsg4;return _regenerator["default"].wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(0,_helper.empty)(authorization)){_context.next=5;break}errorMsg={code:40001,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token is empty"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],errorMsg);case 5:if(!(authorization&&authorization.indexOf("Bearer ")===-1)){_context.next=10;break}_errorMsg={code:40001,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token doesn't have a Bearer prefix to it"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],_errorMsg);case 10:token=authorization.substring(6).trim();_context.next=13;return(0,_index2.validateToken)(token);case 13:validateTokenResponse=_context.sent;if(!(validateTokenResponse.status==="EXPIRED")){_context.next=17;break}_errorMsg2={code:40002,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token is expired"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],_errorMsg2);case 17:if(!validateTokenResponse.error){_context.next=20;break}_errorMsg3={code:40003,message:global.httpStatusCodes["401_MESSAGE"],fields:[{name:"authorization",value:"Token is not valid"}]};throw new _index.AuthenticationError(global.httpStatusCodes.UNAUTHORIZED,global.httpStatusCodes["401_MESSAGE"],_errorMsg3);case 20:/**
	 * Business logic to validate Input variables
	 * accountId should be an array and cannot be empty
	 * startDate and endDate should be a number of format YYYYMMDD
	 */validationErrors=[];//Check for Account Id
if((0,_helper.empty)(accountNumber)){validationErrors.push({name:"accountNumber",value:"accountNumber provided is empty"})}else if(accountNumber.constructor===Array){accountNumber.map(function(val){if(val.constructor!==String){validationErrors.push({name:"accountNumber",value:"".concat(val," should be of type string")})}// if (!stringIsNumber(val)) {
// 	validationErrors.push({name: "accountNumber", value: `${val} is not a valid accountId`});
// }
})}if((0,_helper.empty)(validationErrors)){_context.next=25;break}_errorMsg4={code:40301,message:"Some parameters are missing",fields:validationErrors};throw new _index.ValidationError(global.httpStatusCodes.BAD_REQUEST,"Some parameters are missing",_errorMsg4);case 25:if(!(accountNumber.length===1)){_context.next=29;break}return _context.abrupt("return",_stubData.stubData1);case 29:if(!(accountNumber.length===2)){_context.next=33;break}return _context.abrupt("return",_stubData.stubData2);case 33:return _context.abrupt("return",_stubData.stubData3);case 34:case"end":return _context.stop();}}},_callee)}));return function stubClientBalanceService(_x,_x2){return _ref.apply(this,arguments)}}();exports.stubClientBalanceService=stubClientBalanceService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,